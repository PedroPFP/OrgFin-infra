Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # Usado para ligar o capacityProvider em noss cluster
  CapaciyProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      CapacityProviders:
        - !Ref CapacityProvider
      Cluster: !Ref Cluster
      DefaultCapacityProviderStrategy:
        - Base: 1
          Weight: 1
          CapacityProvider: !Ref CapacityProvider
  # Usado para ligar o ASG ao nosso clusterAssociation
  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties: 
      AutoScalingGroupProvider: 
        AutoScalingGroupArn: !Ref ASG
      Name: api-transacoes-capacity
  # Precisamos de um ASG gerar as instancias que irão se registrar no cluster e rodar os containers
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - Cluster
      - Ec2Role
    Properties:
      AutoScalingGroupName: asg-api-transacoes
      VPCZoneIdentifier:
        - subnet-04950f43443f82417
        - subnet-0893d9206d486445a
      AvailabilityZoneDistribution:
        CapacityDistributionStrategy: balanced-best-effort
      DesiredCapacity: 1
      LaunchTemplate: 
        LaunchTemplateId: !Ref ContainerInstance
        Version: !GetAtt ContainerInstance.LatestVersionNumber
      MaxSize: 1
      MinSize: 0
      NewInstancesProtectedFromScaleIn: True
    UpdatePolicy:
      AutoScallingReplacingUpdate: 
        WillReplace: "true"
  # Configuração para cada container adicionado no cluster
  ContainerInstance:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData: 
        EbsOptimized: false
        IamInstanceProfile:           
          Name: !Ref Profile
        ImageId: ami-0eab6be2916bd677c
        InstanceType: t2.micro
        SecurityGroupIds:
          - !Ref ContainerSecurityGroup
        UserData:
          Fn::Base64: !Sub |
           #!/bin/bash -xe
            echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ContainerInstances --configsets full_install --region ${AWS::Region} &
      LaunchTemplateName: api-transacoes-container
  # Profile usado nas instancias
  Profile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Ec2Role
  # Firewall e regras de rede padrão
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: no-permission
      VpcId: vpc-0305bc0dd3c6bf3ae
      GroupDescription: "Descricao padrao"
  # Roles que serão ligadas ao profile
  Ec2Role:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Statement: 
          - Effect: Allow
            Action: 
              - sts:AssumeRole
            Principal:
              Service: 
                - ecs-tasks.amazonaws.com
  Service:
    Type: AWS::ECS::Service
    Properties:
      AvailabilityZoneRebalancing: ENABLED
      DesiredCount: 1
      Cluster: !Ref Cluster
      LaunchType: EC2
      TaskDefinition: !Ref Task
  Task:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: tasks-familia-api-transacao
      RequiresCompatibilities: 
        - EC2
      ContainerDefinitions:
        - Name: api-transacoes-container
          Image: 977465939936.dkr.ecr.sa-east-1.amazonaws.com/github/pedropfp/orgfin-transacoes-api
          Memory: 512
          Cpu: 1
          Essential: True
          PortMappings:
            - ContainerPort: 80