Parameters:
    TargetContainerRepository:
      RepositoryName: 977465939936.dkr.ecr.sa-east-1.amazonaws.com/github/pedropfp/orgfin-transacoes-api
  
Resources:
  # Usado para ligar o capacityProvider em noss cluster
  CapaciyProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      CapacityProviders:
        - !Ref CapacityProvider
      Cluster: !Ref Cluster
      DefaultCapacityProviderStrategy:
        - Base: 1
          Weight: 1
          CapacityProvider: 
            AutoScalingGroupArn: !Ref CapacityProvider
            ManagedScaling:
              MaximumScalingStepSize: 1
              Status: ENABLED
              TargeCapacity: 1
            ManagedTerminationProtection: ENABLED
  # Usado para ligar o ASG ao nosso clusterAssociation
  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties: 
      AutoScalingGroupProvider: !Ref ASG
      Name: api-transacoes-capacity
  # Precisamos de um ASG gerar as instancias que irão se registrar no cluster e rodar os containers
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - Cluster
      - Ec2Role
    Properties:
      AutoScallingGroupName: asg-api-transacoes
      AvailabilityZoneDistribution:
        CapacityDistributionStrategy: balanced-best-effort
      DesiredCapacity: 1
      LaunchTemplate: 
        LaunchTemplateId: !Ref ContainerInstance
        Version: !GetAtt ContainerInstance.LatestVersionNumber
      MaxSize: 1
      MinSize: 0
      NewInstanceProtectedFromScaleIn: True
    UpdatePolicy:
      AutoScallingReplacingUpdate: 
        WillReplace: "true"
  # Configuração para cada container adicionado no cluster
  ContainerInstance:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData: 
        CpuOptions: 
          CoreCount: 1
        EbsOptimized: false
        IamInstanceProfile: !Ref Profile
        ImageId: a
        InstanceType: t2.micro
        SecurityGroupIds:
          - !Ref ContainerSecurityGroup
        UserData:
          Fn::Base64: !Sub |
           #!/bin/bash -xe
            echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ContainerInstances --configsets full_install --region ${AWS::Region} &
      LaunchTemplateName: api-transacoes-container
  # Imagem que será usada para criar as instancias
  Image:
    Type: AWS::ImageBuilder::Image
    Properties:
      ContainerRecipeArn: !Ref ContainerRecipe
  # Profile usado nas instancias
  Profile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: api-transacoes-profile
      Roles:
        - !Ref Ec2Role
  # Firewall e regras de rede padrão
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: no-permission
      VpcId: vpc-0305bc0dd3c6bf3ae
  # Roles que serão ligadas ao profile
  Ec2Role:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        - Effect: Allow
          Action: 
            - dynamodb:Query
            - dymamodb:Scan
            - dynamodb:PutItem
            - dynamodb:Delete*        
            - dynamodb:Update*
            - dynamodb:Get
          Resource: arn:aws:dynamodb:sa-east-1:977465939936:table/tb_transacoes
  ContainerRecipe:
    Type: AWS::ImageBuilder::ContainerRecipe
    Properties:
      TargetRepository: 
        Ref: TargetContainerRepository